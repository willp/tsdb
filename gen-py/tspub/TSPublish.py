#
# Autogenerated by Thrift Compiler (0.9.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,dynamic
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.protocol.TBase import TBase, TExceptionBase


class Iface(object):
  def CreateNodeType(self, nodetype, attrs):
    """
    Parameters:
     - nodetype
     - attrs
    """
    pass

  def CreateMetric(self, name, mtype, mclass):
    """
    Parameters:
     - name
     - mtype
     - mclass
    """
    pass

  def GetNodeTypes(self, ):
    pass

  def GetMetrics(self, ):
    pass

  def Store(self, nodetype, attrs, timestamp, value):
    """
    Parameters:
     - nodetype
     - attrs
     - timestamp
     - value
    """
    pass

  def StoreBulk(self, nodetype, attrs, values):
    """
    Parameters:
     - nodetype
     - attrs
     - values
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def CreateNodeType(self, nodetype, attrs):
    """
    Parameters:
     - nodetype
     - attrs
    """
    self.send_CreateNodeType(nodetype, attrs)
    return self.recv_CreateNodeType()

  def send_CreateNodeType(self, nodetype, attrs):
    self._oprot.writeMessageBegin('CreateNodeType', TMessageType.CALL, self._seqid)
    args = CreateNodeType_args()
    args.nodetype = nodetype
    args.attrs = attrs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_CreateNodeType(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = CreateNodeType_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "CreateNodeType failed: unknown result");

  def CreateMetric(self, name, mtype, mclass):
    """
    Parameters:
     - name
     - mtype
     - mclass
    """
    self.send_CreateMetric(name, mtype, mclass)
    return self.recv_CreateMetric()

  def send_CreateMetric(self, name, mtype, mclass):
    self._oprot.writeMessageBegin('CreateMetric', TMessageType.CALL, self._seqid)
    args = CreateMetric_args()
    args.name = name
    args.mtype = mtype
    args.mclass = mclass
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_CreateMetric(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = CreateMetric_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "CreateMetric failed: unknown result");

  def GetNodeTypes(self, ):
    self.send_GetNodeTypes()
    return self.recv_GetNodeTypes()

  def send_GetNodeTypes(self, ):
    self._oprot.writeMessageBegin('GetNodeTypes', TMessageType.CALL, self._seqid)
    args = GetNodeTypes_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetNodeTypes(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetNodeTypes_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetNodeTypes failed: unknown result");

  def GetMetrics(self, ):
    self.send_GetMetrics()
    return self.recv_GetMetrics()

  def send_GetMetrics(self, ):
    self._oprot.writeMessageBegin('GetMetrics', TMessageType.CALL, self._seqid)
    args = GetMetrics_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetMetrics(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetMetrics_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetMetrics failed: unknown result");

  def Store(self, nodetype, attrs, timestamp, value):
    """
    Parameters:
     - nodetype
     - attrs
     - timestamp
     - value
    """
    self.send_Store(nodetype, attrs, timestamp, value)
    self.recv_Store()

  def send_Store(self, nodetype, attrs, timestamp, value):
    self._oprot.writeMessageBegin('Store', TMessageType.CALL, self._seqid)
    args = Store_args()
    args.nodetype = nodetype
    args.attrs = attrs
    args.timestamp = timestamp
    args.value = value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_Store(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = Store_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.exc is not None:
      raise result.exc
    return

  def StoreBulk(self, nodetype, attrs, values):
    """
    Parameters:
     - nodetype
     - attrs
     - values
    """
    self.send_StoreBulk(nodetype, attrs, values)
    self.recv_StoreBulk()

  def send_StoreBulk(self, nodetype, attrs, values):
    self._oprot.writeMessageBegin('StoreBulk', TMessageType.CALL, self._seqid)
    args = StoreBulk_args()
    args.nodetype = nodetype
    args.attrs = attrs
    args.values = values
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_StoreBulk(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = StoreBulk_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.exc is not None:
      raise result.exc
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["CreateNodeType"] = Processor.process_CreateNodeType
    self._processMap["CreateMetric"] = Processor.process_CreateMetric
    self._processMap["GetNodeTypes"] = Processor.process_GetNodeTypes
    self._processMap["GetMetrics"] = Processor.process_GetMetrics
    self._processMap["Store"] = Processor.process_Store
    self._processMap["StoreBulk"] = Processor.process_StoreBulk

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_CreateNodeType(self, seqid, iprot, oprot):
    args = CreateNodeType_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = CreateNodeType_result()
    result.success = self._handler.CreateNodeType(args.nodetype, args.attrs)
    oprot.writeMessageBegin("CreateNodeType", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_CreateMetric(self, seqid, iprot, oprot):
    args = CreateMetric_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = CreateMetric_result()
    result.success = self._handler.CreateMetric(args.name, args.mtype, args.mclass)
    oprot.writeMessageBegin("CreateMetric", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetNodeTypes(self, seqid, iprot, oprot):
    args = GetNodeTypes_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetNodeTypes_result()
    result.success = self._handler.GetNodeTypes()
    oprot.writeMessageBegin("GetNodeTypes", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetMetrics(self, seqid, iprot, oprot):
    args = GetMetrics_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetMetrics_result()
    result.success = self._handler.GetMetrics()
    oprot.writeMessageBegin("GetMetrics", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_Store(self, seqid, iprot, oprot):
    args = Store_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = Store_result()
    try:
      self._handler.Store(args.nodetype, args.attrs, args.timestamp, args.value)
    except InvalidSample as exc:
      result.exc = exc
    oprot.writeMessageBegin("Store", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_StoreBulk(self, seqid, iprot, oprot):
    args = StoreBulk_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = StoreBulk_result()
    try:
      self._handler.StoreBulk(args.nodetype, args.attrs, args.values)
    except InvalidSample as exc:
      result.exc = exc
    oprot.writeMessageBegin("StoreBulk", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class CreateNodeType_args(TBase):
  """
  Attributes:
   - nodetype
   - attrs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodetype', None, None, ), # 1
    (2, TType.LIST, 'attrs', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, nodetype=None, attrs=None,):
    self.nodetype = nodetype
    self.attrs = attrs

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateNodeType_result(TBase):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateMetric_args(TBase):
  """
  Attributes:
   - name
   - mtype
   - mclass
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'mtype', None, None, ), # 2
    (3, TType.I32, 'mclass', None, None, ), # 3
  )

  def __init__(self, name=None, mtype=None, mclass=None,):
    self.name = name
    self.mtype = mtype
    self.mclass = mclass

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateMetric_result(TBase):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetNodeTypes_args(TBase):

  thrift_spec = (
  )

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetNodeTypes_result(TBase):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(NodeType, NodeType.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetMetrics_args(TBase):

  thrift_spec = (
  )

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetMetrics_result(TBase):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Metric, Metric.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Store_args(TBase):
  """
  Attributes:
   - nodetype
   - attrs
   - timestamp
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodetype', None, None, ), # 1
    (2, TType.LIST, 'attrs', (TType.STRING,None), None, ), # 2
    (3, TType.DOUBLE, 'timestamp', None, None, ), # 3
    (4, TType.DOUBLE, 'value', None, None, ), # 4
  )

  def __init__(self, nodetype=None, attrs=None, timestamp=None, value=None,):
    self.nodetype = nodetype
    self.attrs = attrs
    self.timestamp = timestamp
    self.value = value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Store_result(TBase):
  """
  Attributes:
   - exc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exc', (InvalidSample, InvalidSample.thrift_spec), None, ), # 1
  )

  def __init__(self, exc=None,):
    self.exc = exc

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreBulk_args(TBase):
  """
  Attributes:
   - nodetype
   - attrs
   - values
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodetype', None, None, ), # 1
    (2, TType.LIST, 'attrs', (TType.STRING,None), None, ), # 2
    (3, TType.MAP, 'values', (TType.DOUBLE,None,TType.DOUBLE,None), None, ), # 3
  )

  def __init__(self, nodetype=None, attrs=None, values=None,):
    self.nodetype = nodetype
    self.attrs = attrs
    self.values = values

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreBulk_result(TBase):
  """
  Attributes:
   - exc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exc', (InvalidSample, InvalidSample.thrift_spec), None, ), # 1
  )

  def __init__(self, exc=None,):
    self.exc = exc

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
