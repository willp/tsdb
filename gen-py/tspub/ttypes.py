#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,dynamic
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.protocol.TBase import TBase, TExceptionBase



class Sample(TBase):
  """
  Attributes:
   - nodetype
   - attrs
   - metric
   - timestamp
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodetype', None, None, ), # 1
    (2, TType.LIST, 'attrs', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'metric', None, None, ), # 3
    (4, TType.DOUBLE, 'timestamp', None, None, ), # 4
    (5, TType.DOUBLE, 'value', None, None, ), # 5
  )

  def __init__(self, nodetype=None, attrs=None, metric=None, timestamp=None, value=None,):
    self.nodetype = nodetype
    self.attrs = attrs
    self.metric = metric
    self.timestamp = timestamp
    self.value = value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SampleBulk(TBase):
  """
  Attributes:
   - nodetype
   - attrs
   - metric
   - values
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodetype', None, None, ), # 1
    (2, TType.LIST, 'attrs', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'metric', None, None, ), # 3
    (4, TType.MAP, 'values', (TType.DOUBLE,None,TType.DOUBLE,None), None, ), # 4
  )

  def __init__(self, nodetype=None, attrs=None, metric=None, values=None,):
    self.nodetype = nodetype
    self.attrs = attrs
    self.metric = metric
    self.values = values

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidSample(TExceptionBase):
  """
  Attributes:
   - what
   - why
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'what', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
  )

  def __init__(self, what=None, why=None,):
    self.what = what
    self.why = why

  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
